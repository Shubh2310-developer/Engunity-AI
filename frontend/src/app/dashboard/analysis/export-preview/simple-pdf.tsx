// Simplified PDF Generation for Testing
import jsPDF from 'jspdf';
import 'jspdf-autotable';

// Simple type extension
declare module 'jspdf' {
  interface jsPDF {
    autoTable: (options: any) => void;
    lastAutoTable: any;
  }
}

export const generateSimplePDF = async (analysisData: any, setIsGeneratingPDF: (loading: boolean) => void) => {
  setIsGeneratingPDF(true);
  
  try {
    console.log('ðŸ”¥ Starting simple PDF generation...');
    console.log('ðŸ“Š Analysis data received:', {
      data: analysisData,
      type: typeof analysisData,
      keys: analysisData ? Object.keys(analysisData) : 'null'
    });
    
    const pdf = new jsPDF('p', 'mm', 'a4');
    const pageWidth = pdf.internal.pageSize.getWidth();
    let yPosition = 20;
    
    // Basic colors
    const primaryColor = [59, 130, 246]; // Blue
    const textColor = [51, 65, 85]; // Gray
    
    // Title
    pdf.setFontSize(20);
    pdf.setFont('helvetica', 'bold');
    pdf.setTextColor(primaryColor[0], primaryColor[1], primaryColor[2]);
    pdf.text('Analysis Report', pageWidth / 2, yPosition, { align: 'center' });
    yPosition += 20;
    
    // Dataset info
    if (analysisData.fileInfo) {
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.setTextColor(textColor[0], textColor[1], textColor[2]);
      pdf.text('Dataset Information', 20, yPosition);
      yPosition += 10;
      
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`File: ${analysisData.fileInfo.name || 'Unknown'}`, 20, yPosition);
      yPosition += 8;
      pdf.text(`Rows: ${analysisData.fileInfo.rows || 0}`, 20, yPosition);
      yPosition += 8;
      pdf.text(`Columns: ${analysisData.fileInfo.columns || 0}`, 20, yPosition);
      yPosition += 15;
    }
    
    // Simple table test
    try {
      console.log('ðŸ“Š Adding test table...');
      pdf.autoTable({
        startY: yPosition,
        head: [['Property', 'Value']],
        body: [
          ['Dataset Name', analysisData.fileInfo?.name || 'N/A'],
          ['Total Records', (analysisData.fileInfo?.rows || 0).toString()],
          ['Columns', (analysisData.fileInfo?.columns || 0).toString()],
          ['Analysis Date', new Date().toLocaleDateString()]
        ],
        theme: 'grid',
        styles: { fontSize: 10 },
        headStyles: { fillColor: primaryColor }
      });
      
      yPosition = pdf.lastAutoTable.finalY + 10;
    } catch (tableError) {
      console.error('Table generation failed:', tableError);
      pdf.text('Table generation failed', 20, yPosition);
      yPosition += 10;
    }
    
    // Charts info (simplified)
    if (analysisData.customCharts && analysisData.customCharts.length > 0) {
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Visualizations', 20, yPosition);
      yPosition += 10;
      
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Total Charts: ${analysisData.customCharts.length}`, 20, yPosition);
      yPosition += 8;
    }
    
    // Predictions info (simplified)
    if (analysisData.predictionResults && analysisData.predictionResults.length > 0) {
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Machine Learning Models', 20, yPosition);
      yPosition += 10;
      
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Total Models: ${analysisData.predictionResults.length}`, 20, yPosition);
      yPosition += 8;
    }
    
    // Footer
    pdf.setFontSize(8);
    pdf.setTextColor(100, 100, 100);
    pdf.text('Generated by Engunity AI', pageWidth / 2, 280, { align: 'center' });
    
    console.log('ðŸ’¾ Saving PDF...');
    const fileName = `Simple_Report_${new Date().toISOString().split('T')[0]}.pdf`;
    pdf.save(fileName);
    
    console.log('âœ… Simple PDF generated successfully!');
    
  } catch (error) {
    console.error('ðŸ’¥ Simple PDF generation failed:', error);
    alert(`PDF generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
  } finally {
    setIsGeneratingPDF(false);
  }
};